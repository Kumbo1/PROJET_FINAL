//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PROJET_FINAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjetDBEntities2 : DbContext
    {
        public ProjetDBEntities2()
            : base("name=ProjetDBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Commande> Commandes { get; set; }
        public virtual DbSet<Livreur> Livreurs { get; set; }
        public virtual DbSet<Objet> Objets { get; set; }
        public virtual DbSet<Ville> Villes { get; set; }
    
        public virtual int InsertClients(string pprenom, string pnom, string pville, string pusername, string padresse, string pcodepostal, string ptelephone, Nullable<bool> pestmajeur, Nullable<bool> pestadmin, string pmotdepasse, string pcourriel)
        {
            var pprenomParameter = pprenom != null ?
                new ObjectParameter("pprenom", pprenom) :
                new ObjectParameter("pprenom", typeof(string));
    
            var pnomParameter = pnom != null ?
                new ObjectParameter("pnom", pnom) :
                new ObjectParameter("pnom", typeof(string));
    
            var pvilleParameter = pville != null ?
                new ObjectParameter("pville", pville) :
                new ObjectParameter("pville", typeof(string));
    
            var pusernameParameter = pusername != null ?
                new ObjectParameter("pusername", pusername) :
                new ObjectParameter("pusername", typeof(string));
    
            var padresseParameter = padresse != null ?
                new ObjectParameter("padresse", padresse) :
                new ObjectParameter("padresse", typeof(string));
    
            var pcodepostalParameter = pcodepostal != null ?
                new ObjectParameter("pcodepostal", pcodepostal) :
                new ObjectParameter("pcodepostal", typeof(string));
    
            var ptelephoneParameter = ptelephone != null ?
                new ObjectParameter("ptelephone", ptelephone) :
                new ObjectParameter("ptelephone", typeof(string));
    
            var pestmajeurParameter = pestmajeur.HasValue ?
                new ObjectParameter("pestmajeur", pestmajeur) :
                new ObjectParameter("pestmajeur", typeof(bool));
    
            var pestadminParameter = pestadmin.HasValue ?
                new ObjectParameter("pestadmin", pestadmin) :
                new ObjectParameter("pestadmin", typeof(bool));
    
            var pmotdepasseParameter = pmotdepasse != null ?
                new ObjectParameter("pmotdepasse", pmotdepasse) :
                new ObjectParameter("pmotdepasse", typeof(string));
    
            var pcourrielParameter = pcourriel != null ?
                new ObjectParameter("pcourriel", pcourriel) :
                new ObjectParameter("pcourriel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClients", pprenomParameter, pnomParameter, pvilleParameter, pusernameParameter, padresseParameter, pcodepostalParameter, ptelephoneParameter, pestmajeurParameter, pestadminParameter, pmotdepasseParameter, pcourrielParameter);
        }
    
        public virtual int InsertLivreurs(string pprenom, string pnom, string pusername, string ptelephone, Nullable<bool> pestmajeur, string pmotdepasse, string pcourriel)
        {
            var pprenomParameter = pprenom != null ?
                new ObjectParameter("pprenom", pprenom) :
                new ObjectParameter("pprenom", typeof(string));
    
            var pnomParameter = pnom != null ?
                new ObjectParameter("pnom", pnom) :
                new ObjectParameter("pnom", typeof(string));
    
            var pusernameParameter = pusername != null ?
                new ObjectParameter("pusername", pusername) :
                new ObjectParameter("pusername", typeof(string));
    
            var ptelephoneParameter = ptelephone != null ?
                new ObjectParameter("ptelephone", ptelephone) :
                new ObjectParameter("ptelephone", typeof(string));
    
            var pestmajeurParameter = pestmajeur.HasValue ?
                new ObjectParameter("pestmajeur", pestmajeur) :
                new ObjectParameter("pestmajeur", typeof(bool));
    
            var pmotdepasseParameter = pmotdepasse != null ?
                new ObjectParameter("pmotdepasse", pmotdepasse) :
                new ObjectParameter("pmotdepasse", typeof(string));
    
            var pcourrielParameter = pcourriel != null ?
                new ObjectParameter("pcourriel", pcourriel) :
                new ObjectParameter("pcourriel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLivreurs", pprenomParameter, pnomParameter, pusernameParameter, ptelephoneParameter, pestmajeurParameter, pmotdepasseParameter, pcourrielParameter);
        }
    
        public virtual ObjectResult<VerifyLogin_Result> VerifyLogin(string pusername, string ppassword)
        {
            var pusernameParameter = pusername != null ?
                new ObjectParameter("pusername", pusername) :
                new ObjectParameter("pusername", typeof(string));
    
            var ppasswordParameter = ppassword != null ?
                new ObjectParameter("ppassword", ppassword) :
                new ObjectParameter("ppassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VerifyLogin_Result>("VerifyLogin", pusernameParameter, ppasswordParameter);
        }
    
        public virtual int AjoutCommande(Nullable<int> pidclient, string pinfosup, string pnomobjet, Nullable<decimal> pprixapprox, string pnomcategorie, Nullable<bool> pestmajeur, string padresse, string pville, string pcodepostal, Nullable<System.DateTime> pdatecomm)
        {
            var pidclientParameter = pidclient.HasValue ?
                new ObjectParameter("pidclient", pidclient) :
                new ObjectParameter("pidclient", typeof(int));
    
            var pinfosupParameter = pinfosup != null ?
                new ObjectParameter("pinfosup", pinfosup) :
                new ObjectParameter("pinfosup", typeof(string));
    
            var pnomobjetParameter = pnomobjet != null ?
                new ObjectParameter("pnomobjet", pnomobjet) :
                new ObjectParameter("pnomobjet", typeof(string));
    
            var pprixapproxParameter = pprixapprox.HasValue ?
                new ObjectParameter("pprixapprox", pprixapprox) :
                new ObjectParameter("pprixapprox", typeof(decimal));
    
            var pnomcategorieParameter = pnomcategorie != null ?
                new ObjectParameter("pnomcategorie", pnomcategorie) :
                new ObjectParameter("pnomcategorie", typeof(string));
    
            var pestmajeurParameter = pestmajeur.HasValue ?
                new ObjectParameter("pestmajeur", pestmajeur) :
                new ObjectParameter("pestmajeur", typeof(bool));
    
            var padresseParameter = padresse != null ?
                new ObjectParameter("padresse", padresse) :
                new ObjectParameter("padresse", typeof(string));
    
            var pvilleParameter = pville != null ?
                new ObjectParameter("pville", pville) :
                new ObjectParameter("pville", typeof(string));
    
            var pcodepostalParameter = pcodepostal != null ?
                new ObjectParameter("pcodepostal", pcodepostal) :
                new ObjectParameter("pcodepostal", typeof(string));
    
            var pdatecommParameter = pdatecomm.HasValue ?
                new ObjectParameter("pdatecomm", pdatecomm) :
                new ObjectParameter("pdatecomm", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjoutCommande", pidclientParameter, pinfosupParameter, pnomobjetParameter, pprixapproxParameter, pnomcategorieParameter, pestmajeurParameter, padresseParameter, pvilleParameter, pcodepostalParameter, pdatecommParameter);
        }
    
        public virtual int AjoutObjets(string pnomobjet, Nullable<decimal> pprixapprox)
        {
            var pnomobjetParameter = pnomobjet != null ?
                new ObjectParameter("pnomobjet", pnomobjet) :
                new ObjectParameter("pnomobjet", typeof(string));
    
            var pprixapproxParameter = pprixapprox.HasValue ?
                new ObjectParameter("pprixapprox", pprixapprox) :
                new ObjectParameter("pprixapprox", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjoutObjets", pnomobjetParameter, pprixapproxParameter);
        }
    
        public virtual ObjectResult<ListerCommande_Result> ListerCommande()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListerCommande_Result>("ListerCommande");
        }
    }
}
